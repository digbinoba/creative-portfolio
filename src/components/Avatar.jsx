/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.4.1 public/models/668c4091f174a74779558a36.glb 
*/

import React, { useEffect, useRef } from "react";
import { useFrame, useGraph } from "@react-three/fiber";
import { useAnimations, useFBX, useGLTF, useTexture } from "@react-three/drei";
import { SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";
import * as THREE from "three";
export function Avatar(props) {
  const { animation, wireframe } = props;
  const group = useRef();
  const { scene } = useGLTF("models/avatar.glb");
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { headFollow, cursorFollow } = useControls({
    headFollow: false,
    cursorFollow: false,
  });
  const { animations: typingAnimation } = useFBX("animations/Typing.fbx");
  const { animations: bicycleCrunchAnimation } = useFBX(
    "animations/Bicycle Crunch.fbx"
  );
  const { animations: fallingIdleAnimation } = useFBX(
    "animations/Falling Idle.fbx"
  );
  const { animations: maleDynamicPoseAnimation } = useFBX(
    "animations/Male Dynamic Pose.fbx"
  );
  const { animations: shufflingAnimation } = useFBX("animations/Shuffling.fbx");
  const { animations: situpAnimation } = useFBX("animations/Situps.fbx");
  const { animations: tauntAnimation } = useFBX("animations/Taunt.fbx");
  const { animations: standingIdleAnimation } = useFBX(
    "animations/Standing Idle.fbx"
  );
  const { animations: flairAnimation } = useFBX("animations/Flair.fbx");
  //Change the name of the animation to make it easier to call
  typingAnimation[0].name = "Typing";
  bicycleCrunchAnimation[0].name = "Bicycle Crunch";
  fallingIdleAnimation[0].name = "Falling Idle";
  maleDynamicPoseAnimation[0].name = "Male Dynamic Pose";
  shufflingAnimation[0].name = "Shuffling";
  situpAnimation[0].name = "Situps";
  tauntAnimation[0].name = "Taunt";
  flairAnimation[0].name = "Flair";
  standingIdleAnimation[0].name = "Standing Idle";
  const { actions } = useAnimations(
    [
      typingAnimation[0],
      fallingIdleAnimation[0],
      flairAnimation[0],
      tauntAnimation[0],
      situpAnimation[0],
      bicycleCrunchAnimation[0],
      maleDynamicPoseAnimation[0],
      shufflingAnimation[0],
      standingIdleAnimation[0],
    ],
    group
  );
  const { nodes, materials } = useGLTF("models/avatar.glb");
  console.log(animation);
  useFrame((state) => {
    //Avatar looks at the camera
    if (headFollow) {
      group.current.getObjectByName("Head").lookAt(state.camera.position);
    }
    //Avatar spine follows the cursor
    if (cursorFollow) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      group.current.getObjectByName("Spine2").lookAt(target);
    }
  });

  //Play the animation
  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => {
      actions[animation].reset().fadeOut(0.5);
    };
  }, [animation]);

  useEffect(() => {
    //turn on/off wireframe
    Object.values(materials).forEach((material) => {
      material.wireframe = wireframe;
    });
  }, [wireframe]);
  return (
    <group {...props} dispose={null} ref={group}>
      <group>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          frustumCulled={false}
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          frustumCulled={false}
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          frustumCulled={false}
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          frustumCulled={false}
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          frustumCulled={false}
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/avatar.glb");
useTexture.preload("animations/Typing.fbx");
useTexture.preload("animations/Male Dynamic Pose.fbx");
useTexture.preload("animations/Flair.fbx");
